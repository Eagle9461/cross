// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cross/core/atomic/types.proto

package types

import (
	fmt "fmt"
	types "github.com/datachainlab/cross/x/core/tx/types"
	github_com_datachainlab_cross_x_core_types "github.com/datachainlab/cross/x/core/types"
	types1 "github.com/datachainlab/cross/x/core/xcc/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CoordinatorPhase int32

const (
	COORDINATOR_PHASE_UNKNOWN CoordinatorPhase = 0
	COORDINATOR_PHASE_PREPARE CoordinatorPhase = 1
	COORDINATOR_PHASE_COMMIT  CoordinatorPhase = 2
)

var CoordinatorPhase_name = map[int32]string{
	0: "COORDINATOR_PHASE_UNKNOWN",
	1: "COORDINATOR_PHASE_PREPARE",
	2: "COORDINATOR_PHASE_COMMIT",
}

var CoordinatorPhase_value = map[string]int32{
	"COORDINATOR_PHASE_UNKNOWN": 0,
	"COORDINATOR_PHASE_PREPARE": 1,
	"COORDINATOR_PHASE_COMMIT":  2,
}

func (x CoordinatorPhase) String() string {
	return proto.EnumName(CoordinatorPhase_name, int32(x))
}

func (CoordinatorPhase) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d9baff137dd12b68, []int{0}
}

type CoordinatorDecision int32

const (
	COORDINATOR_DECISION_UNKNOWN CoordinatorDecision = 0
	COORDINATOR_DECISION_COMMIT  CoordinatorDecision = 1
	COORDINATOR_DECISION_ABORT   CoordinatorDecision = 2
)

var CoordinatorDecision_name = map[int32]string{
	0: "COORDINATOR_DECISION_UNKNOWN",
	1: "COORDINATOR_DECISION_COMMIT",
	2: "COORDINATOR_DECISION_ABORT",
}

var CoordinatorDecision_value = map[string]int32{
	"COORDINATOR_DECISION_UNKNOWN": 0,
	"COORDINATOR_DECISION_COMMIT":  1,
	"COORDINATOR_DECISION_ABORT":   2,
}

func (x CoordinatorDecision) String() string {
	return proto.EnumName(CoordinatorDecision_name, int32(x))
}

func (CoordinatorDecision) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d9baff137dd12b68, []int{1}
}

type ContractTransactionStatus int32

const (
	CONTRACT_TRANSACTION_STATUS_UNKNOWN ContractTransactionStatus = 0
	CONTRACT_TRANSACTION_STATUS_PREPARE ContractTransactionStatus = 1
	CONTRACT_TRANSACTION_STATUS_COMMIT  ContractTransactionStatus = 2
	CONTRACT_TRANSACTION_STATUS_ABORT   ContractTransactionStatus = 3
)

var ContractTransactionStatus_name = map[int32]string{
	0: "CONTRACT_TRANSACTION_STATUS_UNKNOWN",
	1: "CONTRACT_TRANSACTION_STATUS_PREPARE",
	2: "CONTRACT_TRANSACTION_STATUS_COMMIT",
	3: "CONTRACT_TRANSACTION_STATUS_ABORT",
}

var ContractTransactionStatus_value = map[string]int32{
	"CONTRACT_TRANSACTION_STATUS_UNKNOWN": 0,
	"CONTRACT_TRANSACTION_STATUS_PREPARE": 1,
	"CONTRACT_TRANSACTION_STATUS_COMMIT":  2,
	"CONTRACT_TRANSACTION_STATUS_ABORT":   3,
}

func (x ContractTransactionStatus) String() string {
	return proto.EnumName(ContractTransactionStatus_name, int32(x))
}

func (ContractTransactionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d9baff137dd12b68, []int{2}
}

type PrepareResult int32

const (
	PREPARE_RESULT_UNKNOWN PrepareResult = 0
	PREPARE_RESULT_OK      PrepareResult = 1
	PREPARE_RESULT_FAILED  PrepareResult = 2
)

var PrepareResult_name = map[int32]string{
	0: "PREPARE_RESULT_UNKNOWN",
	1: "PREPARE_RESULT_OK",
	2: "PREPARE_RESULT_FAILED",
}

var PrepareResult_value = map[string]int32{
	"PREPARE_RESULT_UNKNOWN": 0,
	"PREPARE_RESULT_OK":      1,
	"PREPARE_RESULT_FAILED":  2,
}

func (x PrepareResult) String() string {
	return proto.EnumName(PrepareResult_name, int32(x))
}

func (PrepareResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d9baff137dd12b68, []int{3}
}

type CoordinatorState struct {
	Type         types.CommitProtocol                                 `protobuf:"varint,1,opt,name=type,proto3,enum=cross.core.tx.CommitProtocol" json:"type,omitempty"`
	Channels     []types1.ChannelInfo                                 `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels"`
	Phase        CoordinatorPhase                                     `protobuf:"varint,3,opt,name=phase,proto3,enum=cross.core.atomic.CoordinatorPhase" json:"phase,omitempty"`
	Decision     CoordinatorDecision                                  `protobuf:"varint,4,opt,name=decision,proto3,enum=cross.core.atomic.CoordinatorDecision" json:"decision,omitempty"`
	ConfirmedTxs []github_com_datachainlab_cross_x_core_types.TxIndex `protobuf:"varint,5,rep,packed,name=confirmed_txs,json=confirmedTxs,proto3,casttype=github.com/datachainlab/cross/x/core/types.TxIndex" json:"confirmed_txs,omitempty"`
	Acks         []github_com_datachainlab_cross_x_core_types.TxIndex `protobuf:"varint,6,rep,packed,name=acks,proto3,casttype=github.com/datachainlab/cross/x/core/types.TxIndex" json:"acks,omitempty"`
}

func (m *CoordinatorState) Reset()         { *m = CoordinatorState{} }
func (m *CoordinatorState) String() string { return proto.CompactTextString(m) }
func (*CoordinatorState) ProtoMessage()    {}
func (*CoordinatorState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9baff137dd12b68, []int{0}
}
func (m *CoordinatorState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoordinatorState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoordinatorState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoordinatorState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoordinatorState.Merge(m, src)
}
func (m *CoordinatorState) XXX_Size() int {
	return m.Size()
}
func (m *CoordinatorState) XXX_DiscardUnknown() {
	xxx_messageInfo_CoordinatorState.DiscardUnknown(m)
}

var xxx_messageInfo_CoordinatorState proto.InternalMessageInfo

type ContractTransactionState struct {
	Status             ContractTransactionStatus `protobuf:"varint,1,opt,name=status,proto3,enum=cross.core.atomic.ContractTransactionStatus" json:"status,omitempty"`
	PrepareResult      PrepareResult             `protobuf:"varint,2,opt,name=prepare_result,json=prepareResult,proto3,enum=cross.core.atomic.PrepareResult" json:"prepare_result,omitempty"`
	CoordinatorChannel types1.ChannelInfo        `protobuf:"bytes,3,opt,name=coordinator_channel,json=coordinatorChannel,proto3" json:"coordinator_channel"`
}

func (m *ContractTransactionState) Reset()         { *m = ContractTransactionState{} }
func (m *ContractTransactionState) String() string { return proto.CompactTextString(m) }
func (*ContractTransactionState) ProtoMessage()    {}
func (*ContractTransactionState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9baff137dd12b68, []int{1}
}
func (m *ContractTransactionState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractTransactionState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractTransactionState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractTransactionState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractTransactionState.Merge(m, src)
}
func (m *ContractTransactionState) XXX_Size() int {
	return m.Size()
}
func (m *ContractTransactionState) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractTransactionState.DiscardUnknown(m)
}

var xxx_messageInfo_ContractTransactionState proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cross.core.atomic.CoordinatorPhase", CoordinatorPhase_name, CoordinatorPhase_value)
	proto.RegisterEnum("cross.core.atomic.CoordinatorDecision", CoordinatorDecision_name, CoordinatorDecision_value)
	proto.RegisterEnum("cross.core.atomic.ContractTransactionStatus", ContractTransactionStatus_name, ContractTransactionStatus_value)
	proto.RegisterEnum("cross.core.atomic.PrepareResult", PrepareResult_name, PrepareResult_value)
	proto.RegisterType((*CoordinatorState)(nil), "cross.core.atomic.CoordinatorState")
	proto.RegisterType((*ContractTransactionState)(nil), "cross.core.atomic.ContractTransactionState")
}

func init() { proto.RegisterFile("cross/core/atomic/types.proto", fileDescriptor_d9baff137dd12b68) }

var fileDescriptor_d9baff137dd12b68 = []byte{
	// 678 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x4f, 0x4f, 0xd4, 0x4c,
	0x18, 0x6f, 0x77, 0x17, 0x42, 0xe6, 0x7d, 0x97, 0x2c, 0x83, 0x98, 0x6e, 0x81, 0xee, 0x0a, 0x11,
	0x09, 0x31, 0xdd, 0x80, 0x89, 0x89, 0x26, 0x1e, 0xba, 0xdd, 0x55, 0x2b, 0xd0, 0x6e, 0xa6, 0x25,
	0x26, 0x7a, 0x68, 0x86, 0xd9, 0xc2, 0x36, 0xee, 0x76, 0x36, 0x9d, 0xd9, 0xa4, 0x5e, 0xbc, 0x78,
	0xf1, 0xe8, 0x47, 0x30, 0xf1, 0x1b, 0xf8, 0x11, 0x3c, 0x71, 0xe4, 0xe8, 0x89, 0x28, 0x5c, 0xfc,
	0x0c, 0x9e, 0xcc, 0xb6, 0x05, 0x0a, 0x54, 0x24, 0xf1, 0xd6, 0xf6, 0xf7, 0xe7, 0x79, 0xe6, 0xf7,
	0x3c, 0x1d, 0xb0, 0x48, 0x42, 0xca, 0x58, 0x83, 0xd0, 0xd0, 0x6b, 0x60, 0x4e, 0x07, 0x3e, 0x69,
	0xf0, 0xb7, 0x43, 0x8f, 0xa9, 0xc3, 0x90, 0x72, 0x0a, 0x67, 0x62, 0x58, 0x1d, 0xc3, 0x6a, 0x02,
	0xcb, 0xb7, 0xf6, 0xe9, 0x3e, 0x8d, 0xd1, 0xc6, 0xf8, 0x29, 0x21, 0xca, 0xd5, 0x8c, 0x0f, 0x8f,
	0xb2, 0x1e, 0xb2, 0x9c, 0x81, 0x22, 0x72, 0xc1, 0x7f, 0xe9, 0x4b, 0x11, 0x54, 0x74, 0x4a, 0xc3,
	0xae, 0x1f, 0x60, 0x4e, 0x43, 0x9b, 0x63, 0xee, 0xc1, 0x75, 0x50, 0x1a, 0x73, 0x24, 0xb1, 0x2e,
	0xae, 0x4e, 0x6f, 0x2c, 0xaa, 0x99, 0x1e, 0x78, 0xa4, 0xea, 0x74, 0x30, 0xf0, 0x79, 0x67, 0x2c,
	0x27, 0xb4, 0x8f, 0x62, 0x2a, 0x7c, 0x02, 0xa6, 0x48, 0x0f, 0x07, 0x81, 0xd7, 0x67, 0x52, 0xa1,
	0x5e, 0x5c, 0xfd, 0x6f, 0x63, 0x3e, 0x2b, 0x8b, 0x08, 0x51, 0xf5, 0x04, 0x37, 0x82, 0x3d, 0xda,
	0x2c, 0x1d, 0x1c, 0xd5, 0x04, 0x74, 0x26, 0x81, 0x8f, 0xc0, 0xc4, 0xb0, 0x87, 0x99, 0x27, 0x15,
	0xe3, 0x92, 0xcb, 0xea, 0x95, 0x63, 0xab, 0x99, 0x2e, 0x3b, 0x63, 0x2a, 0x4a, 0x14, 0xb0, 0x09,
	0xa6, 0xba, 0x1e, 0xf1, 0x99, 0x4f, 0x03, 0xa9, 0x14, 0xab, 0x57, 0xae, 0x57, 0xb7, 0x52, 0x36,
	0x3a, 0xd3, 0xc1, 0xd7, 0xa0, 0x4c, 0x68, 0xb0, 0xe7, 0x87, 0x03, 0xaf, 0xeb, 0xf2, 0x88, 0x49,
	0x13, 0xf5, 0xe2, 0x6a, 0xb9, 0xf9, 0xf0, 0xd7, 0x51, 0x6d, 0x63, 0xdf, 0xe7, 0xbd, 0xd1, 0xae,
	0x4a, 0xe8, 0xa0, 0xd1, 0xc5, 0x1c, 0x93, 0x1e, 0xf6, 0x83, 0x3e, 0xde, 0x6d, 0x24, 0xa1, 0x46,
	0x69, 0xe2, 0x71, 0xa4, 0x4e, 0x64, 0x04, 0x5d, 0x2f, 0x42, 0xff, 0x9f, 0x99, 0x39, 0x11, 0x83,
	0x2f, 0x40, 0x09, 0x93, 0x37, 0x4c, 0x9a, 0xfc, 0x27, 0xcf, 0xd8, 0xe3, 0x71, 0xe9, 0xe7, 0xa7,
	0x9a, 0xb0, 0xf4, 0xbe, 0x00, 0x24, 0x9d, 0x06, 0x3c, 0xc4, 0x84, 0x3b, 0x21, 0x0e, 0x18, 0x26,
	0xdc, 0xa7, 0x41, 0x32, 0xbc, 0x16, 0x98, 0x64, 0x1c, 0xf3, 0x11, 0x4b, 0xc7, 0x77, 0x3f, 0x37,
	0x8d, 0x5c, 0xf1, 0x88, 0xa1, 0x54, 0x0b, 0x9f, 0x81, 0xe9, 0x61, 0xe8, 0x0d, 0x71, 0xe8, 0xb9,
	0xa1, 0xc7, 0x46, 0x7d, 0x2e, 0x15, 0x62, 0xb7, 0x7a, 0x8e, 0x5b, 0x27, 0x21, 0xa2, 0x98, 0x87,
	0xca, 0xc3, 0xec, 0x2b, 0x44, 0x60, 0x96, 0x9c, 0x67, 0xef, 0xa6, 0x13, 0x8f, 0xe7, 0x7c, 0xa3,
	0x1d, 0x81, 0x19, 0x75, 0x8a, 0x26, 0x29, 0xac, 0xf1, 0x0b, 0x9b, 0x1b, 0xef, 0x04, 0x5c, 0x04,
	0x55, 0xdd, 0xb2, 0x50, 0xcb, 0x30, 0x35, 0xc7, 0x42, 0x6e, 0xe7, 0xb9, 0x66, 0xb7, 0xdd, 0x1d,
	0x73, 0xd3, 0xb4, 0x5e, 0x9a, 0x15, 0x21, 0x1f, 0xee, 0xa0, 0x76, 0x47, 0x43, 0xed, 0x8a, 0x08,
	0x17, 0x80, 0x74, 0x15, 0xd6, 0xad, 0xed, 0x6d, 0xc3, 0xa9, 0x14, 0xe4, 0xd2, 0x87, 0xcf, 0x8a,
	0xb0, 0xf6, 0x0e, 0xcc, 0xe6, 0xec, 0x12, 0xac, 0x83, 0x85, 0xac, 0xb4, 0xd5, 0xd6, 0x0d, 0xdb,
	0xb0, 0xcc, 0x4c, 0xed, 0x1a, 0x98, 0xcf, 0x65, 0xa4, 0xfe, 0x22, 0x54, 0x80, 0x9c, 0x4b, 0xd0,
	0x9a, 0x16, 0x3a, 0xaf, 0xff, 0x55, 0x04, 0xd5, 0x3f, 0x8e, 0x0f, 0xde, 0x03, 0xcb, 0xba, 0x65,
	0x3a, 0x48, 0xd3, 0x1d, 0xd7, 0x41, 0x9a, 0x69, 0x6b, 0xba, 0x33, 0xf6, 0xb0, 0x1d, 0xcd, 0xd9,
	0xb1, 0x33, 0xdd, 0xfc, 0x85, 0x78, 0x9e, 0xc9, 0x0a, 0x58, 0xba, 0x8e, 0x78, 0x9a, 0x0e, 0xbc,
	0x0b, 0xee, 0x5c, 0xc7, 0x4b, 0x0e, 0x51, 0x4c, 0x0f, 0x41, 0x40, 0xf9, 0xc2, 0xd2, 0x40, 0x19,
	0xdc, 0x4e, 0x4b, 0xba, 0xa8, 0x6d, 0xef, 0x6c, 0x39, 0x99, 0x56, 0xe7, 0xc0, 0xcc, 0x25, 0xcc,
	0xda, 0xac, 0x88, 0xb0, 0x0a, 0xe6, 0x2e, 0x7d, 0x7e, 0xaa, 0x19, 0x5b, 0xed, 0xd6, 0x69, 0x52,
	0x4d, 0xeb, 0xe0, 0x87, 0x22, 0x1c, 0x1c, 0x2b, 0xe2, 0xe1, 0xb1, 0x22, 0x7e, 0x3f, 0x56, 0xc4,
	0x8f, 0x27, 0x8a, 0x70, 0x78, 0xa2, 0x08, 0xdf, 0x4e, 0x14, 0xe1, 0xd5, 0xfa, 0x8d, 0xfe, 0xc1,
	0xec, 0x8d, 0xbc, 0x3b, 0x19, 0x5f, 0x99, 0x0f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x0d,
	0xed, 0x89, 0xb3, 0x05, 0x00, 0x00,
}

func (m *CoordinatorState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoordinatorState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoordinatorState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Acks) > 0 {
		dAtA2 := make([]byte, len(m.Acks)*10)
		var j1 int
		for _, num := range m.Acks {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ConfirmedTxs) > 0 {
		dAtA4 := make([]byte, len(m.ConfirmedTxs)*10)
		var j3 int
		for _, num := range m.ConfirmedTxs {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTypes(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x2a
	}
	if m.Decision != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Decision))
		i--
		dAtA[i] = 0x20
	}
	if m.Phase != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Phase))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Channels) > 0 {
		for iNdEx := len(m.Channels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Channels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContractTransactionState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractTransactionState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractTransactionState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CoordinatorChannel.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PrepareResult != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PrepareResult))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CoordinatorState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTypes(uint64(m.Type))
	}
	if len(m.Channels) > 0 {
		for _, e := range m.Channels {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.Phase != 0 {
		n += 1 + sovTypes(uint64(m.Phase))
	}
	if m.Decision != 0 {
		n += 1 + sovTypes(uint64(m.Decision))
	}
	if len(m.ConfirmedTxs) > 0 {
		l = 0
		for _, e := range m.ConfirmedTxs {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	if len(m.Acks) > 0 {
		l = 0
		for _, e := range m.Acks {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *ContractTransactionState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if m.PrepareResult != 0 {
		n += 1 + sovTypes(uint64(m.PrepareResult))
	}
	l = m.CoordinatorChannel.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CoordinatorState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoordinatorState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoordinatorState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= types.CommitProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, types1.ChannelInfo{})
			if err := m.Channels[len(m.Channels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			m.Phase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phase |= CoordinatorPhase(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decision", wireType)
			}
			m.Decision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decision |= CoordinatorDecision(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v github_com_datachainlab_cross_x_core_types.TxIndex
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_datachainlab_cross_x_core_types.TxIndex(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ConfirmedTxs = append(m.ConfirmedTxs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ConfirmedTxs) == 0 {
					m.ConfirmedTxs = make([]github_com_datachainlab_cross_x_core_types.TxIndex, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_datachainlab_cross_x_core_types.TxIndex
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_datachainlab_cross_x_core_types.TxIndex(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ConfirmedTxs = append(m.ConfirmedTxs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfirmedTxs", wireType)
			}
		case 6:
			if wireType == 0 {
				var v github_com_datachainlab_cross_x_core_types.TxIndex
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= github_com_datachainlab_cross_x_core_types.TxIndex(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Acks = append(m.Acks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Acks) == 0 {
					m.Acks = make([]github_com_datachainlab_cross_x_core_types.TxIndex, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v github_com_datachainlab_cross_x_core_types.TxIndex
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= github_com_datachainlab_cross_x_core_types.TxIndex(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Acks = append(m.Acks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Acks", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractTransactionState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractTransactionState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractTransactionState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ContractTransactionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrepareResult", wireType)
			}
			m.PrepareResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrepareResult |= PrepareResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorChannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoordinatorChannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
