// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cross/core/auth/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/ibc-go/modules/core/02-client/types"
	github_com_datachainlab_cross_x_core_types "github.com/datachainlab/cross/x/core/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgSignTx struct {
	TxID    github_com_datachainlab_cross_x_core_types.TxID `protobuf:"bytes,1,opt,name=txID,proto3,casttype=github.com/datachainlab/cross/x/core/types.TxID" json:"txID,omitempty"`
	Signers []AccountID                                     `protobuf:"bytes,2,rep,name=signers,proto3,casttype=AccountID" json:"signers,omitempty"`
	// Timeout height relative to the current block height.
	// The timeout is disabled when set to 0.
	TimeoutHeight types.Height `protobuf:"bytes,3,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height" yaml:"timeout_height"`
	// Timeout timestamp (in nanoseconds) relative to the current block timestamp.
	// The timeout is disabled when set to 0.
	TimeoutTimestamp uint64 `protobuf:"varint,4,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty" yaml:"timeout_timestamp"`
}

func (m *MsgSignTx) Reset()         { *m = MsgSignTx{} }
func (m *MsgSignTx) String() string { return proto.CompactTextString(m) }
func (*MsgSignTx) ProtoMessage()    {}
func (*MsgSignTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_bca20369ddda3126, []int{0}
}
func (m *MsgSignTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignTx.Merge(m, src)
}
func (m *MsgSignTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignTx proto.InternalMessageInfo

// MsgSignTxResponse defines the Msg/SignTx response type.
type MsgSignTxResponse struct {
	TxAuthCompleted bool   `protobuf:"varint,1,opt,name=tx_auth_completed,json=txAuthCompleted,proto3" json:"tx_auth_completed,omitempty"`
	Log             string `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
}

func (m *MsgSignTxResponse) Reset()         { *m = MsgSignTxResponse{} }
func (m *MsgSignTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSignTxResponse) ProtoMessage()    {}
func (*MsgSignTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bca20369ddda3126, []int{1}
}
func (m *MsgSignTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignTxResponse.Merge(m, src)
}
func (m *MsgSignTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignTxResponse proto.InternalMessageInfo

type MsgIBCSignTx struct {
	CrossChainChannel *types1.Any                                     `protobuf:"bytes,1,opt,name=cross_chain_channel,json=crossChainChannel,proto3" json:"cross_chain_channel,omitempty"`
	TxID              github_com_datachainlab_cross_x_core_types.TxID `protobuf:"bytes,2,opt,name=txID,proto3,casttype=github.com/datachainlab/cross/x/core/types.TxID" json:"txID,omitempty"`
	Signers           []AccountID                                     `protobuf:"bytes,3,rep,name=signers,proto3,casttype=AccountID" json:"signers,omitempty"`
	// Timeout height relative to the current block height.
	// The timeout is disabled when set to 0.
	TimeoutHeight types.Height `protobuf:"bytes,4,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height" yaml:"timeout_height"`
	// Timeout timestamp (in nanoseconds) relative to the current block timestamp.
	// The timeout is disabled when set to 0.
	TimeoutTimestamp uint64 `protobuf:"varint,5,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty" yaml:"timeout_timestamp"`
}

func (m *MsgIBCSignTx) Reset()         { *m = MsgIBCSignTx{} }
func (m *MsgIBCSignTx) String() string { return proto.CompactTextString(m) }
func (*MsgIBCSignTx) ProtoMessage()    {}
func (*MsgIBCSignTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_bca20369ddda3126, []int{2}
}
func (m *MsgIBCSignTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIBCSignTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIBCSignTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIBCSignTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIBCSignTx.Merge(m, src)
}
func (m *MsgIBCSignTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgIBCSignTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIBCSignTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIBCSignTx proto.InternalMessageInfo

// MsgIBCSignTxResponse defines the Msg/IBCSignTx response type.
type MsgIBCSignTxResponse struct {
}

func (m *MsgIBCSignTxResponse) Reset()         { *m = MsgIBCSignTxResponse{} }
func (m *MsgIBCSignTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgIBCSignTxResponse) ProtoMessage()    {}
func (*MsgIBCSignTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bca20369ddda3126, []int{3}
}
func (m *MsgIBCSignTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIBCSignTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIBCSignTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIBCSignTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIBCSignTxResponse.Merge(m, src)
}
func (m *MsgIBCSignTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIBCSignTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIBCSignTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIBCSignTxResponse proto.InternalMessageInfo

type MsgExtSignTx struct {
	TxID    github_com_datachainlab_cross_x_core_types.TxID `protobuf:"bytes,1,opt,name=txID,proto3,casttype=github.com/datachainlab/cross/x/core/types.TxID" json:"txID,omitempty"`
	Signers []Account                                       `protobuf:"bytes,2,rep,name=signers,proto3" json:"signers"`
}

func (m *MsgExtSignTx) Reset()         { *m = MsgExtSignTx{} }
func (m *MsgExtSignTx) String() string { return proto.CompactTextString(m) }
func (*MsgExtSignTx) ProtoMessage()    {}
func (*MsgExtSignTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_bca20369ddda3126, []int{4}
}
func (m *MsgExtSignTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExtSignTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExtSignTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExtSignTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExtSignTx.Merge(m, src)
}
func (m *MsgExtSignTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgExtSignTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExtSignTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExtSignTx proto.InternalMessageInfo

type MsgExtSignTxResponse struct {
}

func (m *MsgExtSignTxResponse) Reset()         { *m = MsgExtSignTxResponse{} }
func (m *MsgExtSignTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExtSignTxResponse) ProtoMessage()    {}
func (*MsgExtSignTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bca20369ddda3126, []int{5}
}
func (m *MsgExtSignTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExtSignTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExtSignTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExtSignTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExtSignTxResponse.Merge(m, src)
}
func (m *MsgExtSignTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExtSignTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExtSignTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExtSignTxResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSignTx)(nil), "cross.core.auth.MsgSignTx")
	proto.RegisterType((*MsgSignTxResponse)(nil), "cross.core.auth.MsgSignTxResponse")
	proto.RegisterType((*MsgIBCSignTx)(nil), "cross.core.auth.MsgIBCSignTx")
	proto.RegisterType((*MsgIBCSignTxResponse)(nil), "cross.core.auth.MsgIBCSignTxResponse")
	proto.RegisterType((*MsgExtSignTx)(nil), "cross.core.auth.MsgExtSignTx")
	proto.RegisterType((*MsgExtSignTxResponse)(nil), "cross.core.auth.MsgExtSignTxResponse")
}

func init() { proto.RegisterFile("cross/core/auth/msgs.proto", fileDescriptor_bca20369ddda3126) }

var fileDescriptor_bca20369ddda3126 = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xb6, 0xe3, 0x50, 0x9a, 0x6b, 0x4b, 0x1b, 0x53, 0x24, 0x63, 0xa8, 0x6d, 0x59, 0x42, 0x44,
	0x0c, 0xb6, 0x9a, 0x2e, 0xa8, 0x5b, 0x9d, 0x22, 0x1a, 0xa4, 0x0c, 0x98, 0x4e, 0x30, 0x04, 0xdb,
	0x3d, 0xce, 0x96, 0x6c, 0x5f, 0x94, 0x3b, 0x57, 0xce, 0xcc, 0xc2, 0xc8, 0xce, 0xd2, 0x3f, 0x82,
	0x3f, 0x22, 0x63, 0x47, 0x26, 0x0b, 0xda, 0x85, 0xb9, 0x12, 0x4b, 0x27, 0xe4, 0xf3, 0x8f, 0xa6,
	0x4d, 0x41, 0x20, 0x2a, 0x96, 0xe4, 0xe9, 0x7d, 0xef, 0x7d, 0x77, 0xfe, 0xbe, 0xf7, 0x0e, 0xc8,
	0xde, 0x18, 0x13, 0x62, 0x7a, 0x78, 0x0c, 0x4d, 0x27, 0xa1, 0xbe, 0x19, 0x11, 0x44, 0x8c, 0xd1,
	0x18, 0x53, 0x2c, 0xae, 0x32, 0xcc, 0xc8, 0x31, 0x23, 0xc7, 0xe4, 0xfb, 0x08, 0x63, 0x14, 0x42,
	0x93, 0xc1, 0x6e, 0xf2, 0xce, 0x74, 0xe2, 0x49, 0x51, 0x2b, 0xaf, 0x23, 0x8c, 0x30, 0x0b, 0xcd,
	0x3c, 0x2a, 0xb3, 0x6a, 0xe0, 0x7a, 0x05, 0xb7, 0x17, 0x06, 0x30, 0xa6, 0xe6, 0xe1, 0x66, 0x19,
	0x95, 0x05, 0x0f, 0xae, 0x1e, 0x4f, 0x27, 0x23, 0x58, 0x9e, 0xaf, 0x7f, 0x6e, 0x80, 0xd6, 0x80,
	0xa0, 0x57, 0x01, 0x8a, 0xf7, 0x53, 0xf1, 0x39, 0x68, 0xd2, 0xb4, 0xbf, 0x2b, 0xf1, 0x1a, 0xdf,
	0x59, 0xb6, 0xb6, 0xce, 0x33, 0xd5, 0x44, 0x01, 0xf5, 0x13, 0xd7, 0xf0, 0x70, 0x64, 0x1e, 0x38,
	0xd4, 0xf1, 0x7c, 0x27, 0x88, 0x43, 0xc7, 0x35, 0x0b, 0xd2, 0xb4, 0xa0, 0x2d, 0x18, 0xf7, 0xd3,
	0xfe, 0xae, 0xcd, 0x08, 0xc4, 0xc7, 0xe0, 0x36, 0x09, 0x50, 0x0c, 0xc7, 0x44, 0x6a, 0x68, 0x42,
	0x67, 0xd9, 0x5a, 0x39, 0xcf, 0xd4, 0xd6, 0x8e, 0xe7, 0xe1, 0x24, 0xa6, 0xfd, 0x5d, 0xbb, 0x42,
	0xc5, 0xb7, 0xe0, 0x0e, 0x0d, 0x22, 0x88, 0x13, 0x3a, 0xf4, 0x61, 0x80, 0x7c, 0x2a, 0x09, 0x1a,
	0xdf, 0x59, 0xea, 0xca, 0x46, 0xe0, 0x7a, 0x85, 0x2c, 0xe5, 0xc7, 0x1c, 0x6e, 0x1a, 0x7b, 0xac,
	0xc2, 0xda, 0x98, 0x66, 0x2a, 0x77, 0x96, 0xa9, 0xf7, 0x26, 0x4e, 0x14, 0x6e, 0xeb, 0x97, 0xfb,
	0x75, 0x7b, 0xa5, 0x4c, 0x14, 0xd5, 0x62, 0x1f, 0xb4, 0xab, 0x8a, 0xfc, 0x9f, 0x50, 0x27, 0x1a,
	0x49, 0x4d, 0x8d, 0xef, 0x34, 0xad, 0x87, 0x67, 0x99, 0x2a, 0x5d, 0x26, 0xa9, 0x4b, 0x74, 0x7b,
	0xad, 0xcc, 0xed, 0x57, 0xa9, 0xed, 0xc5, 0x0f, 0x47, 0x2a, 0xf7, 0xfd, 0x48, 0xe5, 0xf4, 0x37,
	0xa0, 0x5d, 0xab, 0x66, 0x43, 0x32, 0xc2, 0x31, 0x81, 0xe2, 0x13, 0xd0, 0xa6, 0xe9, 0x30, 0x97,
	0x78, 0xe8, 0xe1, 0x68, 0x14, 0x42, 0x0a, 0x0f, 0x98, 0x94, 0x8b, 0xf6, 0x2a, 0x4d, 0x77, 0x12,
	0xea, 0xf7, 0xaa, 0xb4, 0xb8, 0x06, 0x84, 0x10, 0x23, 0xa9, 0xa1, 0xf1, 0x9d, 0x96, 0x9d, 0x87,
	0x33, 0xe4, 0xef, 0x05, 0xb0, 0x3c, 0x20, 0xa8, 0x6f, 0xf5, 0x4a, 0x5b, 0x5e, 0x80, 0xbb, 0x4c,
	0xee, 0x21, 0x53, 0x3f, 0xff, 0x8d, 0x63, 0x18, 0x32, 0xea, 0xa5, 0xee, 0xba, 0x51, 0x4c, 0x8c,
	0x51, 0x4d, 0x8c, 0xb1, 0x13, 0x4f, 0xac, 0xe6, 0x34, 0x53, 0x79, 0xbb, 0xcd, 0xda, 0x7a, 0x79,
	0x57, 0xaf, 0x68, 0xaa, 0x2d, 0x6e, 0xdc, 0xa0, 0xc5, 0xc2, 0x5f, 0x5a, 0xdc, 0xfc, 0x1f, 0x16,
	0xdf, 0xfa, 0x47, 0x8b, 0x35, 0xb0, 0x3e, 0x6b, 0x42, 0xe5, 0xf2, 0x4c, 0xc5, 0x27, 0x9e, 0xf9,
	0xf4, 0x2c, 0xa5, 0x37, 0xbd, 0x3e, 0x4f, 0x2f, 0xaf, 0xcf, 0x52, 0x57, 0x32, 0xae, 0xbc, 0x13,
	0x46, 0x29, 0x34, 0x33, 0x9a, 0xab, 0xc5, 0x9e, 0xbb, 0x7f, 0x7d, 0xb9, 0xf9, 0xfb, 0x77, 0x7f,
	0xf0, 0x40, 0x18, 0x10, 0x24, 0xee, 0x81, 0x85, 0xf2, 0x03, 0xe4, 0xb9, 0x63, 0xea, 0x29, 0x97,
	0xf5, 0x5f, 0x63, 0xf5, 0x06, 0xbc, 0x04, 0xad, 0x8b, 0xa9, 0xdd, 0xb8, 0xae, 0xa1, 0x86, 0xe5,
	0x47, 0xbf, 0x85, 0x67, 0x29, 0x2f, 0x04, 0xbe, 0x96, 0xb2, 0x86, 0xaf, 0xa7, 0x9c, 0x53, 0xc0,
	0x1a, 0x4c, 0xbf, 0x29, 0xdc, 0xf4, 0x44, 0xe1, 0x8f, 0x4f, 0x14, 0xfe, 0xeb, 0x89, 0xc2, 0x7f,
	0x3c, 0x55, 0xb8, 0xe3, 0x53, 0x85, 0xfb, 0x72, 0xaa, 0x70, 0xaf, 0xff, 0xcc, 0xb2, 0x8b, 0x87,
	0xd4, 0x5d, 0x60, 0x8b, 0xb7, 0xf5, 0x33, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x51, 0xbf, 0xad, 0xe7,
	0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// SignTx defines a rpc handler method for MsgSignTx.
	SignTx(ctx context.Context, in *MsgSignTx, opts ...grpc.CallOption) (*MsgSignTxResponse, error)
	// IBCSignTx defines a rpc handler method for MsgIBCSignTx.
	IBCSignTx(ctx context.Context, in *MsgIBCSignTx, opts ...grpc.CallOption) (*MsgIBCSignTxResponse, error)
	// ExtSignTx
	ExtSignTx(ctx context.Context, in *MsgExtSignTx, opts ...grpc.CallOption) (*MsgExtSignTxResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SignTx(ctx context.Context, in *MsgSignTx, opts ...grpc.CallOption) (*MsgSignTxResponse, error) {
	out := new(MsgSignTxResponse)
	err := c.cc.Invoke(ctx, "/cross.core.auth.Msg/SignTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IBCSignTx(ctx context.Context, in *MsgIBCSignTx, opts ...grpc.CallOption) (*MsgIBCSignTxResponse, error) {
	out := new(MsgIBCSignTxResponse)
	err := c.cc.Invoke(ctx, "/cross.core.auth.Msg/IBCSignTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExtSignTx(ctx context.Context, in *MsgExtSignTx, opts ...grpc.CallOption) (*MsgExtSignTxResponse, error) {
	out := new(MsgExtSignTxResponse)
	err := c.cc.Invoke(ctx, "/cross.core.auth.Msg/ExtSignTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// SignTx defines a rpc handler method for MsgSignTx.
	SignTx(context.Context, *MsgSignTx) (*MsgSignTxResponse, error)
	// IBCSignTx defines a rpc handler method for MsgIBCSignTx.
	IBCSignTx(context.Context, *MsgIBCSignTx) (*MsgIBCSignTxResponse, error)
	// ExtSignTx
	ExtSignTx(context.Context, *MsgExtSignTx) (*MsgExtSignTxResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SignTx(ctx context.Context, req *MsgSignTx) (*MsgSignTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignTx not implemented")
}
func (*UnimplementedMsgServer) IBCSignTx(ctx context.Context, req *MsgIBCSignTx) (*MsgIBCSignTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IBCSignTx not implemented")
}
func (*UnimplementedMsgServer) ExtSignTx(ctx context.Context, req *MsgExtSignTx) (*MsgExtSignTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtSignTx not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SignTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cross.core.auth.Msg/SignTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignTx(ctx, req.(*MsgSignTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IBCSignTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIBCSignTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IBCSignTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cross.core.auth.Msg/IBCSignTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IBCSignTx(ctx, req.(*MsgIBCSignTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExtSignTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExtSignTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExtSignTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cross.core.auth.Msg/ExtSignTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExtSignTx(ctx, req.(*MsgExtSignTx))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cross.core.auth.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignTx",
			Handler:    _Msg_SignTx_Handler,
		},
		{
			MethodName: "IBCSignTx",
			Handler:    _Msg_IBCSignTx_Handler,
		},
		{
			MethodName: "ExtSignTx",
			Handler:    _Msg_ExtSignTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cross/core/auth/msgs.proto",
}

func (m *MsgSignTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Log) > 0 {
		i -= len(m.Log)
		copy(dAtA[i:], m.Log)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Log)))
		i--
		dAtA[i] = 0x12
	}
	if m.TxAuthCompleted {
		i--
		if m.TxAuthCompleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgIBCSignTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIBCSignTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIBCSignTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0x12
	}
	if m.CrossChainChannel != nil {
		{
			size, err := m.CrossChainChannel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMsgs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIBCSignTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIBCSignTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIBCSignTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExtSignTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExtSignTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExtSignTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExtSignTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExtSignTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExtSignTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSignTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, b := range m.Signers {
			l = len(b)
			n += 1 + l + sovMsgs(uint64(l))
		}
	}
	l = m.TimeoutHeight.Size()
	n += 1 + l + sovMsgs(uint64(l))
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovMsgs(uint64(m.TimeoutTimestamp))
	}
	return n
}

func (m *MsgSignTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxAuthCompleted {
		n += 2
	}
	l = len(m.Log)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgIBCSignTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CrossChainChannel != nil {
		l = m.CrossChainChannel.Size()
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, b := range m.Signers {
			l = len(b)
			n += 1 + l + sovMsgs(uint64(l))
		}
	}
	l = m.TimeoutHeight.Size()
	n += 1 + l + sovMsgs(uint64(l))
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovMsgs(uint64(m.TimeoutTimestamp))
	}
	return n
}

func (m *MsgIBCSignTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExtSignTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, e := range m.Signers {
			l = e.Size()
			n += 1 + l + sovMsgs(uint64(l))
		}
	}
	return n
}

func (m *MsgExtSignTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSignTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = append(m.TxID[:0], dAtA[iNdEx:postIndex]...)
			if m.TxID == nil {
				m.TxID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, make([]byte, postIndex-iNdEx))
			copy(m.Signers[len(m.Signers)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxAuthCompleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TxAuthCompleted = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIBCSignTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIBCSignTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIBCSignTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossChainChannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CrossChainChannel == nil {
				m.CrossChainChannel = &types1.Any{}
			}
			if err := m.CrossChainChannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = append(m.TxID[:0], dAtA[iNdEx:postIndex]...)
			if m.TxID == nil {
				m.TxID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, make([]byte, postIndex-iNdEx))
			copy(m.Signers[len(m.Signers)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIBCSignTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIBCSignTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIBCSignTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExtSignTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExtSignTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExtSignTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = append(m.TxID[:0], dAtA[iNdEx:postIndex]...)
			if m.TxID == nil {
				m.TxID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, Account{})
			if err := m.Signers[len(m.Signers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExtSignTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExtSignTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExtSignTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
