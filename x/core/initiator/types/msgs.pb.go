// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cross/core/initiator/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	types1 "github.com/cosmos/ibc-go/modules/core/02-client/types"
	github_com_datachainlab_cross_x_core_auth_types "github.com/datachainlab/cross/x/core/auth/types"
	types "github.com/datachainlab/cross/x/core/tx/types"
	github_com_datachainlab_cross_x_core_types "github.com/datachainlab/cross/x/core/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InitiateTxStatus int32

const (
	INITIATE_TX_STATUS_UNKNOWN  InitiateTxStatus = 0
	INITIATE_TX_STATUS_PENDING  InitiateTxStatus = 1
	INITIATE_TX_STATUS_VERIFIED InitiateTxStatus = 2
)

var InitiateTxStatus_name = map[int32]string{
	0: "INITIATE_TX_STATUS_UNKNOWN",
	1: "INITIATE_TX_STATUS_PENDING",
	2: "INITIATE_TX_STATUS_VERIFIED",
}

var InitiateTxStatus_value = map[string]int32{
	"INITIATE_TX_STATUS_UNKNOWN":  0,
	"INITIATE_TX_STATUS_PENDING":  1,
	"INITIATE_TX_STATUS_VERIFIED": 2,
}

func (x InitiateTxStatus) String() string {
	return proto.EnumName(InitiateTxStatus_name, int32(x))
}

func (InitiateTxStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_316bc286678ddff1, []int{0}
}

type MsgInitiateTx struct {
	Sender               github_com_datachainlab_cross_x_core_auth_types.AccountID   `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/datachainlab/cross/x/core/auth/types.AccountID" json:"sender,omitempty"`
	ChainId              string                                                      `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce                uint64                                                      `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	CommitProtocol       types.CommitProtocol                                        `protobuf:"varint,4,opt,name=commit_protocol,json=commitProtocol,proto3,enum=cross.core.tx.CommitProtocol" json:"commit_protocol,omitempty"`
	ContractTransactions []ContractTransaction                                       `protobuf:"bytes,5,rep,name=contract_transactions,json=contractTransactions,proto3" json:"contract_transactions"`
	Signers              []github_com_datachainlab_cross_x_core_auth_types.AccountID `protobuf:"bytes,6,rep,name=signers,proto3,casttype=github.com/datachainlab/cross/x/core/auth/types.AccountID" json:"signers,omitempty"`
	// Timeout height relative to the current block height.
	// The timeout is disabled when set to 0.
	TimeoutHeight types1.Height `protobuf:"bytes,7,opt,name=timeout_height,json=timeoutHeight,proto3" json:"timeout_height" yaml:"timeout_height"`
	// Timeout timestamp (in nanoseconds) relative to the current block timestamp.
	// The timeout is disabled when set to 0.
	TimeoutTimestamp uint64 `protobuf:"varint,8,opt,name=timeout_timestamp,json=timeoutTimestamp,proto3" json:"timeout_timestamp,omitempty" yaml:"timeout_timestamp"`
}

func (m *MsgInitiateTx) Reset()         { *m = MsgInitiateTx{} }
func (m *MsgInitiateTx) String() string { return proto.CompactTextString(m) }
func (*MsgInitiateTx) ProtoMessage()    {}
func (*MsgInitiateTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_316bc286678ddff1, []int{0}
}
func (m *MsgInitiateTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitiateTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitiateTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitiateTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitiateTx.Merge(m, src)
}
func (m *MsgInitiateTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitiateTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitiateTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitiateTx proto.InternalMessageInfo

// MsgInitiateTxResponse defines the Msg/InitiateTx response type.
type MsgInitiateTxResponse struct {
	TxID   github_com_datachainlab_cross_x_core_types.TxID `protobuf:"bytes,1,opt,name=txID,proto3,casttype=github.com/datachainlab/cross/x/core/types.TxID" json:"txID,omitempty"`
	Status InitiateTxStatus                                `protobuf:"varint,2,opt,name=status,proto3,enum=cross.core.initiator.InitiateTxStatus" json:"status,omitempty"`
}

func (m *MsgInitiateTxResponse) Reset()         { *m = MsgInitiateTxResponse{} }
func (m *MsgInitiateTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInitiateTxResponse) ProtoMessage()    {}
func (*MsgInitiateTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_316bc286678ddff1, []int{1}
}
func (m *MsgInitiateTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitiateTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitiateTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitiateTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitiateTxResponse.Merge(m, src)
}
func (m *MsgInitiateTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitiateTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitiateTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitiateTxResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cross.core.initiator.InitiateTxStatus", InitiateTxStatus_name, InitiateTxStatus_value)
	proto.RegisterType((*MsgInitiateTx)(nil), "cross.core.initiator.MsgInitiateTx")
	proto.RegisterType((*MsgInitiateTxResponse)(nil), "cross.core.initiator.MsgInitiateTxResponse")
}

func init() { proto.RegisterFile("cross/core/initiator/msgs.proto", fileDescriptor_316bc286678ddff1) }

var fileDescriptor_316bc286678ddff1 = []byte{
	// 665 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x41, 0x4f, 0x13, 0x41,
	0x14, 0xc7, 0x77, 0x69, 0x29, 0x38, 0x48, 0xad, 0x93, 0x92, 0x2c, 0x55, 0x76, 0x37, 0x35, 0x31,
	0x55, 0x93, 0xdd, 0x50, 0xbc, 0x48, 0xa2, 0x09, 0xa5, 0x05, 0x37, 0x86, 0x4a, 0x96, 0x45, 0x8c,
	0x07, 0xd7, 0xed, 0x74, 0xdc, 0x4e, 0xd2, 0xdd, 0x69, 0x76, 0xa6, 0xa4, 0xfd, 0x06, 0x1c, 0xfd,
	0x08, 0x24, 0xde, 0xfc, 0x24, 0x1c, 0xb9, 0x98, 0x78, 0x6a, 0x14, 0x2e, 0x9e, 0x39, 0x72, 0x32,
	0xdd, 0x9d, 0x42, 0x8b, 0x35, 0x21, 0xf1, 0xd4, 0x99, 0xf7, 0x7e, 0xef, 0xdf, 0x7f, 0xdf, 0x7b,
	0x53, 0xa0, 0xa1, 0x88, 0x32, 0x66, 0x22, 0x1a, 0x61, 0x93, 0x84, 0x84, 0x13, 0x8f, 0xd3, 0xc8,
	0x0c, 0x98, 0xcf, 0x8c, 0x4e, 0x44, 0x39, 0x85, 0xf9, 0x18, 0x30, 0x86, 0x80, 0x71, 0x05, 0x14,
	0x96, 0x7d, 0x4a, 0xfd, 0x36, 0x36, 0x63, 0xa6, 0xd1, 0xfd, 0x6c, 0x7a, 0x61, 0x3f, 0x29, 0x28,
	0xe4, 0x7d, 0xea, 0xd3, 0xf8, 0x68, 0x0e, 0x4f, 0x22, 0xaa, 0x91, 0x06, 0x4a, 0xbe, 0x05, 0xb5,
	0x09, 0x0e, 0xb9, 0x79, 0xb8, 0x2a, 0x4e, 0x02, 0xd0, 0xa7, 0x1a, 0xe1, 0xfd, 0x0e, 0x16, 0x4e,
	0x0a, 0xcb, 0x63, 0x04, 0xef, 0x8d, 0xa7, 0x8a, 0xdf, 0xd3, 0x60, 0x71, 0x87, 0xf9, 0x56, 0x52,
	0x87, 0x9d, 0x1e, 0xdc, 0x07, 0x19, 0x86, 0xc3, 0x26, 0x8e, 0x14, 0x59, 0x97, 0x4b, 0x77, 0x2b,
	0x2f, 0x2f, 0x07, 0xda, 0x0b, 0x9f, 0xf0, 0x56, 0xb7, 0x61, 0x20, 0x1a, 0x98, 0x4d, 0x8f, 0x7b,
	0xa8, 0xe5, 0x91, 0xb0, 0xed, 0x35, 0xcc, 0x44, 0xb8, 0x97, 0x48, 0x7b, 0x5d, 0xde, 0x12, 0xe2,
	0x1b, 0x08, 0xd1, 0x6e, 0xc8, 0xad, 0xaa, 0x2d, 0xc4, 0xe0, 0x32, 0x98, 0x8f, 0xab, 0x5c, 0xd2,
	0x54, 0x66, 0x74, 0xb9, 0x74, 0xc7, 0x9e, 0x8b, 0xef, 0x56, 0x13, 0xe6, 0xc1, 0x6c, 0x48, 0x43,
	0x84, 0x95, 0x94, 0x2e, 0x97, 0xd2, 0x76, 0x72, 0x81, 0x5b, 0xe0, 0x1e, 0xa2, 0x41, 0x40, 0xb8,
	0x1b, 0x3b, 0x45, 0xb4, 0xad, 0xa4, 0x75, 0xb9, 0x94, 0x2d, 0xaf, 0x18, 0x63, 0x8d, 0xe5, 0x3d,
	0x63, 0x33, 0xa6, 0x76, 0x05, 0x64, 0x67, 0xd1, 0xc4, 0x1d, 0x36, 0xc1, 0x12, 0xa2, 0x21, 0x8f,
	0x3c, 0xc4, 0x5d, 0x1e, 0x79, 0x21, 0xf3, 0x10, 0x27, 0x34, 0x64, 0xca, 0xac, 0x9e, 0x2a, 0x2d,
	0x94, 0x9f, 0x18, 0xd3, 0xc6, 0x64, 0x6c, 0x8a, 0x12, 0xe7, 0xba, 0xa2, 0x92, 0x3e, 0x19, 0x68,
	0x92, 0x9d, 0x47, 0x7f, 0xa7, 0x18, 0x3c, 0x00, 0x73, 0x8c, 0xf8, 0x21, 0x8e, 0x98, 0x92, 0xd1,
	0x53, 0xff, 0xdf, 0xb6, 0x91, 0x1a, 0xfc, 0x04, 0xb2, 0x9c, 0x04, 0x98, 0x76, 0xb9, 0xdb, 0xc2,
	0xc4, 0x6f, 0x71, 0x65, 0x4e, 0x97, 0x4b, 0x0b, 0xe5, 0x82, 0x41, 0x1a, 0x28, 0x71, 0x2d, 0xb6,
	0xe1, 0x70, 0xd5, 0x78, 0x1d, 0x13, 0x95, 0x95, 0xa1, 0xd1, 0x8b, 0x81, 0xb6, 0xd4, 0xf7, 0x82,
	0xf6, 0x7a, 0x71, 0xb2, 0xbe, 0x68, 0x2f, 0x8a, 0x40, 0x42, 0x43, 0x0b, 0xdc, 0x1f, 0x11, 0xc3,
	0x4f, 0xc6, 0xbd, 0xa0, 0xa3, 0xcc, 0x0f, 0x47, 0x51, 0x79, 0x78, 0x31, 0xd0, 0x94, 0x49, 0x91,
	0x2b, 0xa4, 0x68, 0xe7, 0x44, 0xcc, 0x19, 0x85, 0xd6, 0xe7, 0x8f, 0x8e, 0x35, 0xe9, 0xf7, 0xb1,
	0x26, 0x15, 0xbf, 0xc9, 0x60, 0x69, 0x62, 0xaf, 0x6c, 0xcc, 0x3a, 0x34, 0x64, 0x18, 0x6e, 0x83,
	0x34, 0xef, 0x59, 0x55, 0xb1, 0x5d, 0x6b, 0x97, 0x03, 0xcd, 0xbc, 0x55, 0x9b, 0x92, 0x0e, 0x39,
	0x3d, 0xab, 0x6a, 0xc7, 0x02, 0xf0, 0x15, 0xc8, 0x30, 0xee, 0xf1, 0x2e, 0x8b, 0xf7, 0x29, 0x5b,
	0x7e, 0x3c, 0x7d, 0x92, 0xd7, 0x16, 0xf6, 0x62, 0xda, 0x16, 0x55, 0xd7, 0x66, 0x9f, 0xf6, 0x41,
	0xee, 0x26, 0x05, 0x55, 0x50, 0xb0, 0xea, 0x96, 0x63, 0x6d, 0x38, 0x35, 0xd7, 0x79, 0xef, 0xee,
	0x39, 0x1b, 0xce, 0xfe, 0x9e, 0xbb, 0x5f, 0x7f, 0x53, 0x7f, 0x7b, 0x50, 0xcf, 0x49, 0xff, 0xc8,
	0xef, 0xd6, 0xea, 0x55, 0xab, 0xbe, 0x9d, 0x93, 0xa1, 0x06, 0x1e, 0x4c, 0xc9, 0xbf, 0xab, 0xd9,
	0xd6, 0x96, 0x55, 0xab, 0xe6, 0x66, 0x0a, 0xe9, 0xa3, 0xaf, 0xaa, 0x54, 0xc6, 0x20, 0xb5, 0xc3,
	0x7c, 0xf8, 0x11, 0x80, 0xb1, 0x27, 0xf8, 0x68, 0xfa, 0x2f, 0x99, 0xe8, 0x67, 0xe1, 0xd9, 0x2d,
	0xa0, 0x51, 0xd3, 0x2b, 0xf6, 0xc9, 0x2f, 0x55, 0x3a, 0x39, 0x53, 0xe5, 0xd3, 0x33, 0x55, 0xfe,
	0x79, 0xa6, 0xca, 0x5f, 0xce, 0x55, 0xe9, 0xf4, 0x5c, 0x95, 0x7e, 0x9c, 0xab, 0xd2, 0x87, 0xe7,
	0xb7, 0x1a, 0xc0, 0x8d, 0xff, 0x96, 0x46, 0x26, 0x7e, 0x97, 0x6b, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x25, 0xe9, 0x59, 0x61, 0x09, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// InitiateTx defines a rpc handler method for MsgInitiateTx.
	InitiateTx(ctx context.Context, in *MsgInitiateTx, opts ...grpc.CallOption) (*MsgInitiateTxResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) InitiateTx(ctx context.Context, in *MsgInitiateTx, opts ...grpc.CallOption) (*MsgInitiateTxResponse, error) {
	out := new(MsgInitiateTxResponse)
	err := c.cc.Invoke(ctx, "/cross.core.initiator.Msg/InitiateTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// InitiateTx defines a rpc handler method for MsgInitiateTx.
	InitiateTx(context.Context, *MsgInitiateTx) (*MsgInitiateTxResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) InitiateTx(ctx context.Context, req *MsgInitiateTx) (*MsgInitiateTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateTx not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_InitiateTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitiateTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitiateTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cross.core.initiator.Msg/InitiateTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitiateTx(ctx, req.(*MsgInitiateTx))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cross.core.initiator.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiateTx",
			Handler:    _Msg_InitiateTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cross/core/initiator/msgs.proto",
}

func (m *MsgInitiateTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitiateTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitiateTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeoutTimestamp != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.TimeoutTimestamp))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.TimeoutHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintMsgs(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ContractTransactions) > 0 {
		for iNdEx := len(m.ContractTransactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractTransactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.CommitProtocol != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.CommitProtocol))
		i--
		dAtA[i] = 0x20
	}
	if m.Nonce != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitiateTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitiateTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitiateTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxID) > 0 {
		i -= len(m.TxID)
		copy(dAtA[i:], m.TxID)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TxID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgInitiateTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovMsgs(uint64(m.Nonce))
	}
	if m.CommitProtocol != 0 {
		n += 1 + sovMsgs(uint64(m.CommitProtocol))
	}
	if len(m.ContractTransactions) > 0 {
		for _, e := range m.ContractTransactions {
			l = e.Size()
			n += 1 + l + sovMsgs(uint64(l))
		}
	}
	if len(m.Signers) > 0 {
		for _, b := range m.Signers {
			l = len(b)
			n += 1 + l + sovMsgs(uint64(l))
		}
	}
	l = m.TimeoutHeight.Size()
	n += 1 + l + sovMsgs(uint64(l))
	if m.TimeoutTimestamp != 0 {
		n += 1 + sovMsgs(uint64(m.TimeoutTimestamp))
	}
	return n
}

func (m *MsgInitiateTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxID)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMsgs(uint64(m.Status))
	}
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgInitiateTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitiateTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitiateTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitProtocol", wireType)
			}
			m.CommitProtocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitProtocol |= types.CommitProtocol(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractTransactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractTransactions = append(m.ContractTransactions, ContractTransaction{})
			if err := m.ContractTransactions[len(m.ContractTransactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, make([]byte, postIndex-iNdEx))
			copy(m.Signers[len(m.Signers)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TimeoutHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeoutTimestamp", wireType)
			}
			m.TimeoutTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeoutTimestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitiateTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitiateTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitiateTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxID = append(m.TxID[:0], dAtA[iNdEx:postIndex]...)
			if m.TxID == nil {
				m.TxID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= InitiateTxStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)
